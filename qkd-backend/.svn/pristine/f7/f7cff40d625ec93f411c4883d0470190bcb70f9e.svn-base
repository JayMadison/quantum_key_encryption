package net.it691team1.qkdbackend.core;

import java.sql.ResultSet;

import javax.jws.WebMethod;
import javax.jws.WebService;

import net.it691team1.qkdbackend.dao.SimulatorDao;
import net.it691team1.qkdbackend.dto.EqualBits;
import net.it691team1.qkdbackend.dto.MatchBits;
import net.it691team1.qkdbackend.dto.SimulatorDto;

@WebService(endpointInterface = "net.it691team1.qkdbackend.core.QKEndpoint")
public class QKEndpointImpl implements QKEndpoint {

	public QKEndpointImpl() {
		// TODO Auto-generated constructor stub
	}

	@WebMethod
	public char[] getInputFiltersVector(String filters) {
		// TODO Auto-generated method stub
		return null;
	}

	@WebMethod
	public char[] getfilterSets(char[] alicesFilters) {
		// TODO Auto-generated method stub
		return null;
	}

	@WebMethod
	public int[] getBitsVector(char[] alicesFilters) {
		// TODO Auto-generated method stub
		return null;
	}

	@WebMethod
	public char[] genFilters(int N) {
		// TODO Auto-generated method stub
		return null;
	}

	@WebMethod
	public char[] evesFilterFixup(char[] alicesFilters, char[] evesFilters) {
		// TODO Auto-generated method stub
		return null;
	}

	@WebMethod
	public char[] filterMatch(char[] alicesFilters, char[] BobsFilters) {
		// TODO Auto-generated method stub
		return null;
	}

	@WebMethod
	public char[] filterSetMatch(char[] alicesFilterSets, char[] bobsFilterSets) {
		// TODO Auto-generated method stub
		return null;
	}

	@WebMethod
	public MatchBits bitsAfterMatch(char[][] alicesFilters, char[][] bobsFilters,
			char[] setMatches, int[] finalBitsSlots) {
		// TODO Auto-generated method stub
		return null;
	}

	@WebMethod
	public EqualBits bitsEqualTest(int[] finalBitsSlots, int[] bitsVector,
			int[] FinalBits) {
		// TODO Auto-generated method stub
		return null;
	}
	/**
	 * Create a new test Suite
	 * @param numTests
	 * @return suite_id
	 */
	@WebMethod 
	public int createSuite (int numTests){
		return 0;
	}
	
	/**
	 * Updates the completion time when the test pack is complete
	 * @param suiteId
	 * @return boolean success 
	 */
	@WebMethod 
	public boolean completeSuite (int suiteId){
		return true;
	}
	
	/**
	 * Insets a new test given a SimulatorDto Object
	 * @param test
	 * @return int testId
	 */
	@WebMethod 
	public int insertTest (SimulatorDto test){
		return 0;
		
	}
	
	/**
	 * Returns a result set given a Doa object
	 * @param test
	 * @return ResultSet
	 */
	@WebMethod 
	public ResultSet queryTestHisotry (SimulatorDao test ){
		return null;
	}

}
